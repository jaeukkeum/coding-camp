{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"},"colab":{"provenance":[]}},"cells":[{"cell_type":"code","metadata":{"id":"mSi7fY0W2fOL","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1675656924931,"user_tz":-540,"elapsed":17039,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"2c97699c-1273-4597-b20d-89e36ce62be5"},"source":["from google.colab import files   #train데이터 업로드\n","uploaded = files.upload()"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ae577cfb-414b-4007-845f-d80e176a21e0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ae577cfb-414b-4007-845f-d80e176a21e0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving basketball_train.pkl to basketball_train.pkl\n"]}]},{"cell_type":"code","metadata":{"id":"pqmyIM4EFiGG","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1675656971620,"user_tz":-540,"elapsed":10614,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"25236113-c571-4a7d-c801-32979a1fe450"},"source":["from google.colab import files  #test데이터 업로드\n","uploaded = files.upload()"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-df036c7d-dc07-4254-8460-5eaefcfeedbb\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-df036c7d-dc07-4254-8460-5eaefcfeedbb\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving basketball_test.pkl to basketball_test (1).pkl\n"]}]},{"cell_type":"code","metadata":{"id":"355lIxok2bq9","executionInfo":{"status":"ok","timestamp":1675657032779,"user_tz":-540,"elapsed":1555,"user":{"displayName":"금재욱","userId":"08922255478238310787"}}},"source":["import pandas as pd\n","import pickle\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T_QF818i2bq-"},"source":["# 데이터 불러오기 (학습 데이터, 테스트 데이터)\n","데이터 분석 단계(4.2_농구선수_데이터분석.ipynb)에서 생성한 농구 선수 포지션 예측하기의  \n","학습 데이터 및 테스트 데이터를 로드합니다."]},{"cell_type":"code","metadata":{"id":"3YPeFDHE2bq_","executionInfo":{"status":"ok","timestamp":1675657035278,"user_tz":-540,"elapsed":2,"user":{"displayName":"금재욱","userId":"08922255478238310787"}}},"source":["with open('basketball_train.pkl', 'rb') as train_data:\n","    train = pickle.load(train_data)                     #train 변수에 80명 샘플 \n","    \n","with open('basketball_test.pkl', 'rb') as test_data:\n","    test = pickle.load(test_data)                       #test 변수에 20명 샘플"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_mcFKLmhGX9j","executionInfo":{"status":"ok","timestamp":1675657038855,"user_tz":-540,"elapsed":427,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"a2a16af1-258a-40cd-d8bf-fe4fb4be41b6"},"source":["train.head()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               Player Pos   3P   TRB  BLK\n","50         Al Horford   C  1.3   6.8  1.3\n","79      Austin Rivers  SG  1.5   2.2  0.1\n","73     Victor Oladipo  SG  1.9   4.3  0.3\n","33        Rudy Gobert   C  0.0  12.8  2.6\n","85  Marreese Speights   C  1.3   4.5  0.5"],"text/html":["\n","  <div id=\"df-b5579f46-6e6c-43b9-a520-70f0892f5fb2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Player</th>\n","      <th>Pos</th>\n","      <th>3P</th>\n","      <th>TRB</th>\n","      <th>BLK</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>50</th>\n","      <td>Al Horford</td>\n","      <td>C</td>\n","      <td>1.3</td>\n","      <td>6.8</td>\n","      <td>1.3</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>Austin Rivers</td>\n","      <td>SG</td>\n","      <td>1.5</td>\n","      <td>2.2</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>Victor Oladipo</td>\n","      <td>SG</td>\n","      <td>1.9</td>\n","      <td>4.3</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>Rudy Gobert</td>\n","      <td>C</td>\n","      <td>0.0</td>\n","      <td>12.8</td>\n","      <td>2.6</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>Marreese Speights</td>\n","      <td>C</td>\n","      <td>1.3</td>\n","      <td>4.5</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5579f46-6e6c-43b9-a520-70f0892f5fb2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b5579f46-6e6c-43b9-a520-70f0892f5fb2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b5579f46-6e6c-43b9-a520-70f0892f5fb2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"l4dH-Vmo2brA"},"source":["# 최적의 k 찾기 (교차 검증 - cross validation)"]},{"cell_type":"code","metadata":{"id":"VjW4uOg62brB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657293122,"user_tz":-540,"elapsed":1518,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"9cd5ee85-aa25-4fa1-f4ee-06ebad38d779"},"source":["# import kNN library\n","from sklearn.neighbors import KNeighborsClassifier   #knn\n","from sklearn.model_selection import cross_val_score  #교차검증\n","\n","# find best k, range from 3 to half of the number of data   #k=3,5,7....39[40]\n","max_k_range = train.shape[0] // 2   #80//2 = 40  몫나눗셈\n","k_list = []\n","for i in range(3, max_k_range, 2):  #(3,40,2),  i=3,5,7,9,....39\n","    k_list.append(i)              #k_lst=[1,3,5,...39] k값 후보 목록\n","\n","cross_validation_scores = []   #k값에 따른 정확도 저장 리스트\n","x_train = train[['3P', 'BLK' , 'TRB']]   #학습에 사용할 특징\n","y_train = train[['Pos']]                #학습에 사용할 레이블\n","\n","# 10-fold cross validation\n","for k in k_list:   # [3,5,7,,,,39]\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    scores = cross_val_score(knn, x_train, y_train.values.ravel(),\n","                             cv=10, scoring='accuracy')\n","    cross_validation_scores.append(scores.mean())\n","\n","print(cross_validation_scores)"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.925, 0.9125, 0.925, 0.9125, 0.9125, 0.9125, 0.925, 0.925, 0.9125, 0.9, 0.9, 0.8875, 0.8875, 0.875, 0.8625, 0.8625, 0.8625, 0.8375, 0.825]\n"]}]},{"cell_type":"code","metadata":{"id":"4DjUnHVp2brB","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1675657460574,"user_tz":-540,"elapsed":474,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"2f8cc3a8-cf0c-4e4f-a3b6-6cf3fca50226"},"source":["# visualize accuracy according to k\n","plt.plot(k_list, cross_validation_scores)\n","plt.xlabel('the number of k')\n","plt.ylabel('Accuracy')\n","plt.show()"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"6CV8wIAX2brC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657493842,"user_tz":-540,"elapsed":424,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"132ebd98-363d-4dc6-9d09-99d7a6ded2d0"},"source":["# find best k\n","cvs = cross_validation_scores\n","k = k_list[cvs.index(max(cross_validation_scores))]\n","print(\"The best number of k : \" + str(k) )"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["The best number of k : 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"CgEI1F4x2brC"},"source":["# 2개의 특징으로 예측하기 (3점슛, 블로킹) -> 테스트"]},{"cell_type":"code","metadata":{"id":"tRRVzGVY2brD","executionInfo":{"status":"ok","timestamp":1675657555489,"user_tz":-540,"elapsed":436,"user":{"displayName":"금재욱","userId":"08922255478238310787"}}},"source":["# import libraries\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","\n","knn = KNeighborsClassifier(n_neighbors=11)\n","\n","# select data features\n","x_train = train[['3P', 'BLK']]  #특징\n","# select target value\n","y_train = train[['Pos']]        #레이블\n","\n","# setup knn using train data\n","knn.fit(x_train, y_train.values.ravel())   #fit , 주어진 학습데이터를 이용해서 분류기를 생성\n","\n","# select data feature to be used for prediction\n","x_test = test[['3P', 'BLK']]\n","\n","# select target value\n","y_test = test[['Pos']]\n","\n","# test\n","pred = knn.predict(x_test)   #predict 예측 함수, 테스트 데이터의 특징을 가지고 레이블 예측히여 변수에 저장"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"-Z5Pjbfp2brD","colab":{"base_uri":"https://localhost:8080/","height":677},"executionInfo":{"status":"ok","timestamp":1675657563079,"user_tz":-540,"elapsed":445,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"5511a5a7-58f3-4413-ff43-5850b6c042b3"},"source":["# check ground_truth with knn prediction   #그라운드투르쓰: 테스트데이터의 실제 레이블값\n","comparison = pd.DataFrame(\n","    {'prediction':pred, 'ground_truth':y_test.values.ravel()}) \n","comparison   #변수이름"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   prediction ground_truth\n","0          SG           SG\n","1           C            C\n","2           C            C\n","3          SG           SG\n","4          SG           SG\n","5          SG           SG\n","6           C            C\n","7           C            C\n","8          SG           SG\n","9          SG           SG\n","10          C            C\n","11         SG           SG\n","12         SG           SG\n","13          C            C\n","14          C            C\n","15          C            C\n","16         SG           SG\n","17         SG           SG\n","18          C            C\n","19         SG            C"],"text/html":["\n","  <div id=\"df-3feff80a-417c-488f-bf90-735f53553b31\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>prediction</th>\n","      <th>ground_truth</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>SG</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3feff80a-417c-488f-bf90-735f53553b31')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3feff80a-417c-488f-bf90-735f53553b31 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3feff80a-417c-488f-bf90-735f53553b31');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"63Hf-opf2brE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657591521,"user_tz":-540,"elapsed":432,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"c189944e-9773-4e61-cd8e-eee836ade7f9"},"source":["# check accuracy\n","print(\"accuracy : \"+ \n","          str(accuracy_score(y_test.values.ravel(), pred)) )   #그라운드트루쓰와 예측값을 주고 정확도 수치 계산"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy : 0.95\n"]}]},{"cell_type":"markdown","metadata":{"id":"G6Y7ZM332brE"},"source":["# 3개의 특징으로 예측하기 (3점슛, 블로킹, 리바운드)"]},{"cell_type":"code","metadata":{"id":"nj6firgP2brE","executionInfo":{"status":"ok","timestamp":1675657596309,"user_tz":-540,"elapsed":434,"user":{"displayName":"금재욱","userId":"08922255478238310787"}}},"source":["knn = KNeighborsClassifier(n_neighbors=11)\n","\n","# select data features to be used in train\n","x_train = train[['3P', 'BLK', 'TRB']]\n","# select target\n","y_train = train[['Pos']]\n","\n","# build knn model\n","knn.fit(x_train, y_train.values.ravel())\n","\n","# select features to be used for prediction\n","x_test = test[['3P', 'BLK', 'TRB']]\n","\n","# select target\n","y_test = test[['Pos']]\n","\n","# test\n","pred = knn.predict(x_test)"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-f1iQA72brF","colab":{"base_uri":"https://localhost:8080/","height":677},"executionInfo":{"status":"ok","timestamp":1675657606321,"user_tz":-540,"elapsed":440,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"56995934-5c78-496c-9e9c-16143e5ac8c6"},"source":["# check ground_truth with knn prediction\n","comparison = pd.DataFrame(\n","    {'prediction':pred, 'ground_truth':y_test.values.ravel()}) \n","comparison"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   prediction ground_truth\n","0          SG           SG\n","1           C            C\n","2           C            C\n","3          SG           SG\n","4          SG           SG\n","5          SG           SG\n","6           C            C\n","7          SG            C\n","8          SG           SG\n","9          SG           SG\n","10          C            C\n","11         SG           SG\n","12         SG           SG\n","13          C            C\n","14          C            C\n","15          C            C\n","16         SG           SG\n","17         SG           SG\n","18          C            C\n","19         SG            C"],"text/html":["\n","  <div id=\"df-059162b2-5008-468a-9906-6e7c8f3c0d1d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>prediction</th>\n","      <th>ground_truth</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>SG</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>SG</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-059162b2-5008-468a-9906-6e7c8f3c0d1d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-059162b2-5008-468a-9906-6e7c8f3c0d1d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-059162b2-5008-468a-9906-6e7c8f3c0d1d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"ht7rziRS2brF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657613917,"user_tz":-540,"elapsed":435,"user":{"displayName":"금재욱","userId":"08922255478238310787"}},"outputId":"340f0830-905c-43f4-f66d-c7d66247a007"},"source":["# check accuracy\n","print(\"accuracy : \" + \n","          str( accuracy_score(y_test.values.ravel(), pred)) )"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy : 0.9\n"]}]}]}